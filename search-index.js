var searchIndex = JSON.parse('{\
"rustqubo":{"doc":"RustQUBO is a powerful library to create QUBO fromâ€¦","i":[[4,"Expr","rustqubo","",null,null],[13,"Placeholder","","",0,null],[13,"Add","","",0,null],[13,"Mul","","",0,null],[13,"Number","","",0,null],[13,"Binary","","",0,null],[13,"Spin","","",0,null],[13,"Constraint","","",0,null],[12,"label","rustqubo::Expr","",1,null],[12,"expr","","",1,null],[13,"WithPenalty","rustqubo","",0,null],[12,"expr","rustqubo::Expr","",2,null],[12,"penalty","","",2,null],[11,"zero","rustqubo","",0,[[]]],[11,"one","","",0,[[]]],[11,"map","","",0,[[]]],[11,"feed_dict","","",0,[[["hashmap",3]]]],[11,"compile","","",0,[[],["compiledmodel",3]]],[0,"solve","","",null,null],[3,"SimpleSolver","rustqubo::solve","",null,null],[12,"iterations","","",3,null],[12,"samples","","",3,null],[12,"generations","","",3,null],[12,"coeff_strength","","",3,null],[12,"solver_generator","","",3,null],[11,"new","","",3,[[["compiledmodel",3]]]],[11,"with_solver","","",3,[[["compiledmodel",3]]]],[11,"get_qubits","","",3,[[],["vec",3]]],[11,"solve","","",3,[[],["result",4]]],[11,"solve_with_constraints","","Solve the model using internal annealer.",3,[[],["result",4]]],[8,"LabelType","rustqubo","",null,null],[8,"TpType","","",null,null],[8,"TqType","","",null,null],[8,"TcType","","",null,null],[11,"from","","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","rustqubo::solve","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","rustqubo","",0,[[]]],[11,"clone","","",0,[[],["expr",4]]],[11,"eq","","",0,[[["expr",4]]]],[11,"ne","","",0,[[["expr",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"sub","","",0,[[["expr",4]]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"add","","",0,[[["expr",4]]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"mul","","",0,[[["expr",4]]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"add_assign","","",0,[[["expr",4]]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["expr",4]]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["expr",4]]]],[11,"mul_assign","","",0,[[]]],[11,"bitxor","","",0,[[]]],[11,"bitxor_assign","","",0,[[]]]],"p":[[4,"Expr"],[13,"Constraint"],[13,"WithPenalty"],[3,"SimpleSolver"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);